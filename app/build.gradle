import java.text.DateFormat
import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.kabanov.myscheduler"
        minSdkVersion 27
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
    productFlavors {
    }

    def applicationName = "MyScheduler"

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${applicationName}_${variant.buildType.name}_${getDateTime()}_${getCheckedOutGitCommitHash()}.apk"
        }
    }
}

def acraVersion = "5.1.3"
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:27.1.0'
    implementation 'com.android.support:support-v4:27.1.0'
    implementation 'com.android.support:recyclerview-v7:27.1.0'
    implementation 'com.android.support:cardview-v7:27.1.0'
    implementation 'com.android.support:gridlayout-v7:27.1.0'

    implementation 'log4j:log4j:1.2.17'
    implementation 'de.mindpipe.android:android-logging-log4j:1.0.3'

    // Convert to xml
    implementation 'org.simpleframework:simple-xml:2.7.1'

    // google drive 
    implementation "com.google.android.gms:play-services-auth:15.0.1"
    implementation "com.google.android.gms:play-services-drive:15.0.1"
    implementation 'com.squareup.okio:okio:1.14.0'


    implementation 'android.arch.lifecycle:extensions:1.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    implementation "ch.acra:acra-core:$acraVersion"
    implementation "ch.acra:acra-mail:$acraVersion"
    implementation "ch.acra:acra-dialog:$acraVersion"

    implementation 'com.google.guava:guava:19.0'
    testImplementation 'org.mockito:mockito-all:1.9.5'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.4'
    testImplementation 'org.reflections:reflections:0.9.10'
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$rootProject.projectDir/.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

def getDateTime() {
    DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm");

    return df.format(new Date());
}


preBuild {
    doFirst {
        def versionPath = "src\\main\\res\\raw\\version"
        File versionFile = file(versionPath)
        versionFile.text = "${getDateTime()}_${getCheckedOutGitCommitHash()}"
    }
}